# -*- coding: utf-8 -*-
"""TesterModulePopular.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sc1w6jUwsUbHTpBaH5ocZ6PRtKJDsPja
"""

from . import trendsfunctions as tfunc
import numpy as np
import pandas as pd
import copy
import keras.backend as K
from tensorflow.keras.models import load_model

def function(token) :
    #Specifying stock tickers for different stocks
    stock_ticker_tsla = token

    #Getting stock data for training models that have already been trained
    TSLA = tfunc.download_stock_data(stock_ticker_tsla, '2010-01-01','2021-01-01')


    #converting to dataframes individually
    tsla_data = tfunc.get_df(TSLA)


    #Getting stock data for testing 
    testdataframe_tsla = tfunc.download_stock_data(stock_ticker_tsla, '2021-01-01','2021-05-16')


    #Copying testing data into new dataframes
    newtest_tsla = copy.deepcopy(testdataframe_tsla)


    #Getting dataframes for testing data
    testdata_tsla = tfunc.get_df(testdataframe_tsla)

    #Getting test set that has already been preprocessed and scaled by MinMaxScalar
    X_test_tsla = tfunc.get_test_set(stock_train_data=tsla_data, testdata=testdata_tsla)

    #Loading models of stocks that have already been trained
    regressor_tsla = load_model('popularModels/tsla.h5')
    print(regressor_tsla)

    #E:\DjangoFiles\stockMarketPediction_UI\Stock_market_interface\Stock_market_interface\Stocks\popularModels
    experimental_relax_shapes=True
    #Predicting Stock prices and inverse scaling to original values
    predicted_stock_price_tsla = regressor_tsla.predict(X_test_tsla)
    predicted_stock_price_tsla = tfunc.revert_stock_price(predicted_stock_price_tsla)
    K.clear_session()



    #Getting dataframes from predicted values so as to ease the plotting process
    predicted_stock_df_tsla = pd.DataFrame()


    predicted_stock_df_tsla = pd.DataFrame(data=predicted_stock_price_tsla, index=newtest_tsla.index, columns=['y_pred'])

    """## **Plotting trends of Popular Stocks**"""

    a = tfunc.plotter(newtest_tsla, testdata_tsla, predicted_stock_df_tsla, stock_ticker_tsla)

    print(a)
    import plotly
    type(a)
    graph_div = plotly.offline.plot(a, auto_open = False, output_type="div")
    return graph_div





